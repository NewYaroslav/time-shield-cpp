/*!
\defgroup time_structures Time Structures
\brief Structures for representing and working with time and date components.

This group includes various structures used for representing time, date, and date-time combinations,
along with related utility functions for creating and manipulating these structures.

### Included Structures:
- `TimeStruct`: Represents time components (hour, minute, second, millisecond).
- `DateStruct`: Represents date components (year, month, day).
- `DateTimeStruct`: Represents combined date and time components.
- `TimeZoneStruct`: Represents time zone offsets.

### Example Usage:
```cpp
auto time = time_shield::create_time_struct(12, 30, 45);       // 12:30:45
auto date = time_shield::create_date_struct(2024, 11, 25);    // 2024-11-25
auto date_time = time_shield::create_date_time_struct(2024, 11, 25, 12, 30, 45);
auto tz = time_shield::to_time_zone_struct(3600);             // +01:00
```
*/

/*!
\defgroup time_utils Time Utilities
\brief A collection of utility functions for working with timestamps and time components.

This module provides functions for obtaining the current timestamps in various formats
(e.g., seconds, milliseconds, microseconds, floating-point seconds) and extracting
sub-second components such as nanoseconds, microseconds, and milliseconds.

### Key Features:
- Obtain current UTC timestamps in seconds, milliseconds, and microseconds.
- Support for floating-point and integer timestamp formats.
- Extract nanoseconds, microseconds, and milliseconds from the current second.

### Usage Examples:
- Get the current timestamp in seconds:
  \code{.cpp}
  time_shield::ts_t current_time = time_shield::ts();
  \endcode

- Get the millisecond part of the current second:
  \code{.cpp}
  int ms = time_shield::ms_of_sec();
  \endcode

- Get the current timestamp in milliseconds:
  \code{.cpp}
  time_shield::ts_ms_t current_time_ms = time_shield::ts_ms();
  \endcode
*/

/*!
\defgroup time_conversions Time Conversions
\brief A comprehensive set of functions and utilities for working with timestamps and time-related data.

This module provides functionalities to convert, manipulate, and analyze timestamps
in seconds, milliseconds, and floating-point formats. It also includes utilities
for working with date-time structures, UNIX days, and various time units (hours, minutes, seconds, etc.).

### Key Features:
- Convert timestamps between seconds, milliseconds, and floating-point seconds.
- Extract components such as nanoseconds, microseconds, and milliseconds from timestamps.
- Convert timestamps to and from date-time structures.
- Calculate the start and end of various time intervals (e.g., days, hours, months, years).
- Analyze time data (e.g., day of the week, day of the year, days in a month or year).

### Usage Examples:
- Obtain the millisecond component of a timestamp:
  \code{.cpp}
  auto ms = time_shield::ms_of_sec(123.456);
  \endcode

- Convert a date-time structure to a timestamp:
  \code{.cpp}
  auto ts = time_shield::to_timestamp(2024, 11, 25, 14, 30, 0);
  \endcode

- Determine the start of the current year:
  \code{.cpp}
  auto year_start = time_shield::start_of_year(current_timestamp());
  \endcode
*/

/*!
\defgroup time_formatting Time Formatting
\brief A comprehensive set of functions for converting timestamps to formatted strings.

This module provides utilities for formatting timestamps into human-readable strings,
custom formats, ISO8601, and other standardized formats.

### Key Features:
- Custom formatting of timestamps using `strftime`-like specifiers.
- ISO8601 date and time representation.
- MQL5-compatible date and time formatting.
- Conversion to Windows-compatible filename formats.
- Human-readable timestamp formatting.

### Usage Examples:
- Format a timestamp to a custom string:
  \code{.cpp}
  std::string formatted = time_shield::to_string("%H:%M:%S", 1698249600);
  \endcode

- Convert a timestamp to ISO8601 format:
  \code{.cpp}
  std::string iso8601 = time_shield::to_iso8601(1698249600);
  \endcode

- Generate a Windows-compatible filename:
  \code{.cpp}
  std::string filename = time_shield::to_windows_filename(1698249600);
  \endcode
*/

/*!
\defgroup time_zone_conversions Time Zone Conversions
\ingroup time_conversions
\brief Helpers for converting regional time zones to GMT.

These functions convert Central and Eastern European Time to Greenwich
Mean Time. Daylight saving time rules before and after 2002 are taken
into account, so conversions are accurate for legacy timestamps as well.

### Example Usage:
```cpp
ts_t cet_ts = time_shield::to_ts(2024, Month::JUN, 21, 12, 0, 0);
ts_t gmt_ts = time_shield::cet_to_gmt(cet_ts);
```
*/

/*!
\defgroup ntp NTP Client
\brief Facilities for retrieving time using the Network Time Protocol.

This module contains a minimal client capable of querying remote NTP
servers to measure the offset between local and network time. It uses
WinSock via the `WsaGuard` helper and therefore works only on Windows.

### Features:
- Query NTP servers and obtain the time offset.
- Retrieve corrected UTC time in microseconds and milliseconds.
- Automatic WinSock initialization through `WsaGuard`.
- Requires network connectivity.

### Example Usage:
```cpp
time_shield::NtpClient client;
if (client.query()) {
    int64_t offset = client.get_offset_us();
    int64_t utc_ms = client.get_utc_time_ms();
}
```
*/

/*!
\defgroup time_conversions_time_zone_conversions Time zone conversion helpers
\ingroup time_conversions
\ingroup time_zone_conversions
*/

/*!
\defgroup time_structures_time_conversions Time structure conversions
\ingroup time_structures
\ingroup time_conversions
*/

/*!
\defgroup time_structures_time_formatting Time structure formatting
\ingroup time_structures
\ingroup time_formatting
*/
