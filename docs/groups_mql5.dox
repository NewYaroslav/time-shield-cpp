/*!
\defgroup mql5 MQL5 TimeShield API
\brief Components of the Time Shield library adapted for MetaTrader 5.

This group includes all functions, structures, and utilities that are part of the MQL5-compatible version
of the Time Shield library.

### Example Usage:
```cpp
#include <TimeShield.mqh>
time_shield::DateStruct d = time_shield::create_date_struct(2025, 6, 21);
```
*/

/*!
\defgroup mql5_time_enums Time Enumerations
\ingroup mql5
\brief Enumerations for time-related concepts.

This group contains various enums that represent time-related concepts such as
weekdays, months, time zones, and formatting options.

### Key Features:
- Defines enumerations for consistent handling of weekdays, months, and other time units.
- Provides utility functions for converting enum values to string representations.

### Example Usage:
```cpp
time_shield::Weekday weekday = time_shield::MON;
Print(time_shield::to_str(weekday, time_shield::FULL_NAME)); // "Monday"
```
*/

/*!
\defgroup mql5_initialization Library Initialization
\ingroup mql5
\brief Functions for initializing the Time Shield library in MQL5.

This group contains functions required to set up the Time Shield library before use.
Call ::time_shield::init() once at the beginning of \c OnStart to trigger internal
lazy initialization mechanisms such as those used by ::time_shield::microseconds().
It ensures that all components relying on time resolution are properly initialized before use.
*/

/*!
\defgroup mql5_time_structures Time Structures
\ingroup mql5
\brief Structures for representing and working with time and date components.

This group includes various structures used for representing time, date, and date-time combinations,
along with related utility functions for creating and manipulating these structures.

### Included Structures:
- `TimeStruct`: Represents time components (hour, minute, second, millisecond).
- `DateStruct`: Represents date components (year, month, day).
- `DateTimeStruct`: Represents combined date and time components.
- `TimeZoneStruct`: Represents time zone offsets.

### Example Usage:
```cpp
auto time = time_shield::create_time_struct(12, 30, 45);       // 12:30:45
auto date = time_shield::create_date_struct(2024, 11, 25);    // 2024-11-25
auto date_time = time_shield::create_date_time_struct(2024, 11, 25, 12, 30, 45);
auto tz = time_shield::to_time_zone_struct(3600);             // +01:00
```
*/

/*!
\defgroup mql5_time_conversions Time Conversions
\ingroup mql5
\brief A comprehensive set of functions and utilities for working with timestamps and time-related data.

This module provides functionalities to convert, manipulate, and analyze timestamps
in seconds, milliseconds, and floating-point formats. It also includes utilities
for working with date-time structures, UNIX days, and various time units (hours, minutes, seconds, etc.).

### Key Features:
- Convert timestamps between seconds, milliseconds, and floating-point seconds.
- Extract components such as nanoseconds, microseconds, and milliseconds from timestamps.
- Convert timestamps to and from date-time structures.
- Calculate the start and end of various time intervals (e.g., days, hours, months, years).
- Analyze time data (e.g., day of the week, day of the year, days in a month or year).

### Usage Examples:
- Obtain the millisecond component of a timestamp:
  \code{.cpp}
  auto ms = time_shield::ms_of_sec(123.456);
  \endcode

- Convert a date-time structure to a timestamp:
  \code{.cpp}
  auto ts = time_shield::to_timestamp(2024, 11, 25, 14, 30, 0);
  \endcode

- Determine the start of the current year:
  \code{.cpp}
  auto year_start = time_shield::start_of_year(current_timestamp());
  \endcode
*/

/*!
\defgroup mql5_time_formatting Time Formatting
\ingroup mql5
\brief A comprehensive set of functions for converting timestamps to formatted strings.

This module provides utilities for formatting timestamps into human-readable strings,
custom formats, ISO8601, and other standardized formats.

### Key Features:
- Custom formatting of timestamps using `strftime`-like specifiers.
- ISO8601 date and time representation.
- MQL5-compatible date and time formatting.
- Conversion to Windows-compatible filename formats.
- Human-readable timestamp formatting.

### Usage Examples:
- Format a timestamp to a custom string:
  \code{.cpp}
  std::string formatted = time_shield::to_string("%H:%M:%S", 1698249600);
  \endcode

- Convert a timestamp to ISO8601 format:
  \code{.cpp}
  std::string iso8601 = time_shield::to_iso8601(1698249600);
  \endcode

- Generate a Windows-compatible filename:
  \code{.cpp}
  std::string filename = time_shield::to_windows_filename(1698249600);
  \endcode
*/

/*!
\defgroup mql5_time_structures_time_conversions Time structure conversions
\ingroup mql5_time_structures
\ingroup mql5_time_conversions
*/

/*!
\defgroup mql5_time_structures_time_formatting Time structure formatting
\ingroup mql5_time_structures
\ingroup mql5_time_formatting
*/